name: Custom release job

on:
  workflow_dispatch:
    inputs:
      configuration:
        description: ".NET build configuration"
        required: true
        default: "Release"
        type: choice
        options:
          - Debug
          - Release
      debugType:
        description: ".NET build property 'DebugType'"
        required: true
        default: "embedded"
        type: choice
        options:
          - full
          - pdbonly
          - portable
          - embedded
          - none
      extraOptions:
        description: "Additional command line options for 'dotnet publish'"
        required: false
        type: string
      buildVersion:
        description: "Ryujinx version string"
        default: "1.1.0"
        required: false
        type: string
      addSourceRevision:
        description: "Add commit hash as 'SourceRevisionId'"
        default: false
        required: true
        type: boolean
      name:
        description: "Github release name"
        required: false
        type: string
      tagName:
        description: "Git tag for this release"
        required: true
        type: string
      failFast:
        description: "Abort if any job fails"
        default: false
        required: true
        type: boolean

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.os }} (${{ inputs.buildVersion }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            OS_NAME: Linux x64
            DOTNET_RUNTIME_IDENTIFIER: linux-x64
            RELEASE_ARCHIVE_OS_NAME: linux_x64
            RELEASE_ARCHIVE_COMMAND: "tar -czvf"
            RELEASE_ARCHIVE_SUFFIX: "tar.gz"

          - os: windows-latest
            OS_NAME: Windows x64
            DOTNET_RUNTIME_IDENTIFIER: win10-x64
            RELEASE_ARCHIVE_OS_NAME: win_x64
            RELEASE_ARCHIVE_COMMAND: "7z a"
            RELEASE_ARCHIVE_SUFFIX: "zip"

      fail-fast: ${{ inputs.failFast }}

    env:
      POWERSHELL_TELEMETRY_OPTOUT: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Get version info
        id: version_info
        shell: bash
        run: |
          echo "git_short_hash=$(git rev-parse --short "${{ github.sha }}")" >> $GITHUB_OUTPUT
      - name: Create output dir
        run: mkdir output
      - name: Publish (with SourceRevision)
        if: ${{ inputs.addSourceRevision }}
        shell: bash
        run: |
          dotnet publish -c "${{ inputs.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./gtk/publish -p:Version="${{ inputs.buildVersion }}" -p:SourceRevisionId="${{ steps.version_info.outputs.git_short_hash }}" -p:DebugType="${{ inputs.debugType }}" --self-contained true Ryujinx ${{ inputs.extraOptions }}
          dotnet publish -c "${{ inputs.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./ava/publish -p:Version="${{ inputs.buildVersion }}" -p:SourceRevisionId="${{ steps.version_info.outputs.git_short_hash }}" -p:DebugType="${{ inputs.debugType }}" --self-contained true Ryujinx.Ava ${{ inputs.extraOptions }}
      - name: Publish (without SourceRevision)
        if: ${{ ! inputs.addSourceRevision }}
        shell: bash
        run: |
          dotnet publish -c "${{ inputs.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./gtk/publish -p:Version="${{ inputs.buildVersion }}" -p:DebugType="${{ inputs.debugType }}" --self-contained true Ryujinx ${{ inputs.extraOptions }}
          dotnet publish -c "${{ inputs.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./ava/publish -p:Version="${{ inputs.buildVersion }}" -p:DebugType="${{ inputs.debugType }}" --self-contained true Ryujinx.Ava ${{ inputs.extraOptions }}
      - name: Package release
        shell: bash
        env:
            RELEASE_ARCHIVE_NAME: "ryujinx-${{ inputs.buildVersion }}-${{ matrix.RELEASE_ARCHIVE_OS_NAME }}.${{ matrix.RELEASE_ARCHIVE_SUFFIX }}"
        run: |
          pushd gtk
          ${{ matrix.RELEASE_ARCHIVE_COMMAND }} ../output/$RELEASE_ARCHIVE_NAME publish
          popd
          pushd ava
          ${{ matrix.RELEASE_ARCHIVE_COMMAND }} ../output/ava-$RELEASE_ARCHIVE_NAME publish
          popd
      - name: Create/Update release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ inputs.name }}
          body: "${{ toJson(inputs) }}"
          artifacts: "output/*.${{ matrix.RELEASE_ARCHIVE_SUFFIX }}"
          commit: ${{ github.sha }}
          tag: ${{ inputs.tagName }}
          allowUpdates: true
          replacesArtifacts: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
