name: Custom release job

on:
  workflow_dispatch:
    inputs:
      configuration:
        description: ".NET build configuration"
        required: true
        default: "Release"
        type: choice
        options:
          - Debug
          - Release
      debugType:
        description: ".NET build property 'DebugType'"
        required: true
        default: "embedded"
        type: choice
        options:
          - full
          - pdbonly
          - portable
          - embedded
          - none
      extraOptions:
        description: "Additional command line options for 'dotnet publish'"
        required: false
        type: string
      configName:
        description: "Name with extension of the config file to use"
        default: "Config.json"
        required: false
        type: string
      buildVersion:
        description: "Ryujinx version string"
        default: "1.1.0"
        required: false
        type: string
      addSourceRevision:
        description: "Add commit hash as 'SourceRevisionId'"
        default: false
        required: true
        type: boolean
      name:
        description: "Github release name"
        required: false
        type: string
      tagName:
        description: "Git tag for this release"
        required: true
        type: string
      failFast:
        description: "Abort if any job fails"
        default: false
        required: true
        type: boolean

permissions:
  contents: write

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:
    name: ${{ matrix.OS_NAME }} (${{ inputs.buildVersion }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 35
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            OS_NAME: Linux x64
            DOTNET_RUNTIME_IDENTIFIER: linux-x64
            RELEASE_ARCHIVE_OS_NAME: linux_x64
            RELEASE_ARCHIVE_COMMAND: "tar -czvf"
            RELEASE_ARCHIVE_SUFFIX: "tar.gz"

          - os: windows-latest
            OS_NAME: Windows x64
            DOTNET_RUNTIME_IDENTIFIER: win10-x64
            RELEASE_ARCHIVE_OS_NAME: win_x64
            RELEASE_ARCHIVE_COMMAND: "7z a"
            RELEASE_ARCHIVE_SUFFIX: "zip"

      fail-fast: ${{ inputs.failFast }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json

      - name: Get version info
        id: version_info
        shell: bash
        run: |
          echo "git_short_hash=$(git rev-parse --short "${{ github.sha }}")" >> $GITHUB_OUTPUT

      - name: Configure for release
        run: |
          sed -r --in-place 's/\%\%RYUJINX_BUILD_VERSION\%\%/${{ inputs.buildVersion }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
          sed -r --in-place 's/\%\%RYUJINX_BUILD_GIT_HASH\%\%/${{ steps.version_info.outputs.git_short_hash }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
          sed -r --in-place 's/\%\%RYUJINX_CONFIG_FILE_NAME\%\%/${{ inputs.configName }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
        shell: bash

      - name: Create output dir
        run: mkdir output

      - name: Publish (with SourceRevision)
        if: ${{ inputs.addSourceRevision }}
        shell: bash
        run: |
          dotnet publish -c "${{ inputs.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./gtk/publish -p:Version="${{ inputs.buildVersion }}" -p:SourceRevisionId="${{ steps.version_info.outputs.git_short_hash }}" -p:DebugType="${{ inputs.debugType }}" --self-contained true Ryujinx ${{ inputs.extraOptions }}
          dotnet publish -c "${{ inputs.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./ava/publish -p:Version="${{ inputs.buildVersion }}" -p:SourceRevisionId="${{ steps.version_info.outputs.git_short_hash }}" -p:DebugType="${{ inputs.debugType }}" --self-contained true Ryujinx.Ava ${{ inputs.extraOptions }}

      - name: Publish (without SourceRevision)
        if: ${{ ! inputs.addSourceRevision }}
        shell: bash
        run: |
          dotnet publish -c "${{ inputs.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./gtk/publish -p:Version="${{ inputs.buildVersion }}" -p:DebugType="${{ inputs.debugType }}" --self-contained true Ryujinx ${{ inputs.extraOptions }}
          dotnet publish -c "${{ inputs.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./ava/publish -p:Version="${{ inputs.buildVersion }}" -p:DebugType="${{ inputs.debugType }}" --self-contained true Ryujinx.Ava ${{ inputs.extraOptions }}

      - name: Package release
        shell: bash
        env:
            RELEASE_ARCHIVE_NAME: "ryujinx-${{ inputs.buildVersion }}-${{ matrix.RELEASE_ARCHIVE_OS_NAME }}.${{ matrix.RELEASE_ARCHIVE_SUFFIX }}"
        run: |
          pushd gtk
          ${{ matrix.RELEASE_ARCHIVE_COMMAND }} ../output/$RELEASE_ARCHIVE_NAME publish
          popd
          pushd ava
          ${{ matrix.RELEASE_ARCHIVE_COMMAND }} ../output/ava-$RELEASE_ARCHIVE_NAME publish
          popd

      - name: Create/Update release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ inputs.name }}
          body: "${{ toJson(inputs) }}"
          artifacts: "output/*.${{ matrix.RELEASE_ARCHIVE_SUFFIX }}"
          commit: ${{ github.sha }}
          tag: ${{ inputs.tagName }}
          allowUpdates: true
          replacesArtifacts: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true

  build_macos:
    name: macOS universal (${{ inputs.buildVersion }})
    runs-on: ubuntu-latest
    timeout-minutes: 35
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json

      - name: Setup LLVM 14
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 14

      - name: Install rcodesign
        run: |
          mkdir -p $HOME/.bin
          gh release download -R indygreg/apple-platform-rs -O apple-codesign.tar.gz -p 'apple-codesign-*-x86_64-unknown-linux-musl.tar.gz'
          tar -xzvf apple-codesign.tar.gz --wildcards '*/rcodesign' --strip-components=1
          rm apple-codesign.tar.gz
          mv rcodesign $HOME/.bin/
          echo "$HOME/.bin" >> $GITHUB_PATH
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version info
        id: version_info
        run: |
          echo "git_short_hash=$(git rev-parse --short "${{ github.sha }}")" >> $GITHUB_OUTPUT

      - name: Configure for release
        run: |
          sed -r --in-place 's/\%\%RYUJINX_BUILD_VERSION\%\%/${{ inputs.buildVersion }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
          sed -r --in-place 's/\%\%RYUJINX_BUILD_GIT_HASH\%\%/${{ steps.version_info.outputs.git_short_hash }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
          sed -r --in-place 's/\%\%RYUJINX_CONFIG_FILE_NAME\%\%/${{ inputs.configName }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
        shell: bash

      - name: Publish macOS (with SourceRevision)
        if: ${{ inputs.addSourceRevision }}
        run: |
          ./distribution/macos/create_macos_build.sh . publish_tmp publish_ava ./distribution/macos/entitlements.xml "${{ inputs.buildVersion }}" "${{ steps.version_info.outputs.git_short_hash }}" "${{ inputs.configuration }}"

      - name: Publish macOS (without SourceRevision)
        if: ${{ ! inputs.addSourceRevision }}
        run: |
          ./distribution/macos/create_macos_build.sh . publish_tmp publish_ava ./distribution/macos/entitlements.xml "${{ inputs.buildVersion }}" "" "${{ inputs.configuration }}"

      - name: Pushing new release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ inputs.name }}
          body: "${{ toJson(inputs) }}"
          artifacts: "publish_ava/*.tar.gz"
          commit: ${{ github.sha }}
          tag: ${{ inputs.tagName }}
          omitBodyDuringUpdate: true
          allowUpdates: true
          replacesArtifacts: true
          owner: ${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_OWNER }}
          repo: ${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_REPO }}
          token: ${{ secrets.RELEASE_TOKEN }}